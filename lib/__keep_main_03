import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';

/// 使うアセット
const String kTokyoMunicipalAsset = 'assets/tokyo_municipal.geojson';

/// 区市町村の1件ぶん（複数ポリゴン=MultiPolygon対応）
class MunicipalGeom {
  final String name; // 例: 港区 / 立川市 / 奥多摩町
  final String kind; // '区' / '市' / '町村'
  final List<List<List<List<double>>>> polygons; // [poly][rings][points][lng/lat]
  MunicipalGeom({required this.name, required this.kind, required this.polygons});
}

Future<List<MunicipalGeom>> loadTokyoMunicipals(String assetPath) async {
  final text = await rootBundle.loadString(assetPath);
  final data = jsonDecode(text);

  // FeatureCollection 前提だが、FeatureでもOKにしておく
  final List features;
  if (data['type'] == 'FeatureCollection') {
    features = (data['features'] as List);
  } else if (data['type'] == 'Feature') {
    features = [data];
  } else {
    throw Exception('Unsupported GeoJSON root: ${data['type']}');
  }

  final list = <MunicipalGeom>[];
  for (final f in features) {
    final props = Map<String, dynamic>.from(f['properties'] ?? {});
    final geom = Map<String, dynamic>.from(f['geometry'] ?? {});
    if (geom.isEmpty) continue;

    // 市区町村名（N03_004 が一般的。無ければ name を見る）
    final rawName = (props['N03_004'] ?? props['name'] ?? '') as String;
    if (rawName.isEmpty) continue;

    // 種別（接尾辞で判定）… "区" / "市" / "町" or "村" を簡易分類
    String kind = '市';
    if (rawName.endsWith('区')) {
      kind = '区';
    } else if (rawName.endsWith('市')) {
      kind = '市';
    } else {
      kind = '町村';
    }

    final type = geom['type'] as String;
    final coords = geom['coordinates'];
    if (type == 'Polygon') {
      // [rings][points][2]
      final poly = (coords as List)
          .map<List<List<double>>>(
            (ring) => (ring as List)
                .map<List<double>>((pt) => (pt as List).map((n) => (n as num).toDouble()).toList())
                .toList(),
          )
          .toList();
      list.add(MunicipalGeom(name: rawName, kind: kind, polygons: [poly]));
    } else if (type == 'MultiPolygon') {
      // [polygons][rings][points][2]
      final mpoly = (coords as List)
          .map<List<List<List<double>>>>(
            (poly) => (poly as List)
                .map<List<List<double>>>(
                  (ring) => (ring as List)
                      .map<List<double>>((pt) => (pt as List).map((n) => (n as num).toDouble()).toList())
                      .toList(),
                )
                .toList(),
          )
          .toList();
      list.add(MunicipalGeom(name: rawName, kind: kind, polygons: mpoly));
    }
  }
  return list;
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final municipals = await loadTokyoMunicipals(kTokyoMunicipalAsset);
  runApp(TokyoSelectApp(municipals: municipals));
}

class TokyoSelectApp extends StatelessWidget {
  const TokyoSelectApp({super.key, required this.municipals});

  final List<MunicipalGeom> municipals;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tokyo Select Overlay',
      theme: ThemeData(useMaterial3: true, colorSchemeSeed: const Color(0xFFE53935)),
      home: TokyoSelectPage(municipals: municipals),
    );
  }
}

class TokyoSelectPage extends StatefulWidget {
  const TokyoSelectPage({super.key, required this.municipals});

  final List<MunicipalGeom> municipals;

  @override
  State<TokyoSelectPage> createState() => _TokyoSelectPageState();
}

class _TokyoSelectPageState extends State<TokyoSelectPage> {
  String _category = '区'; // '区' / '市' / '町村'
  String? _selectedName; // 例: '港区'
  final _center = const LatLng(35.6895, 139.6917); // 都庁あたり

  @override
  Widget build(BuildContext context) {
    final filtered = widget.municipals.where((m) => m.kind == _category).toList()
      ..sort((a, b) => a.name.compareTo(b.name));

    // flutter_map 用ポリゴン作成:
    // - 選択中: 濃い赤
    // - 非選択: 薄いグレー
    final polygons = <Polygon>[];
    for (final m in widget.municipals) {
      final isSelected = (m.name == _selectedName);
      final fill = isSelected ? const Color(0x55FF0000) : const Color(0x22000000);
      final stroke = isSelected ? const Color(0xFFFF0000) : const Color(0x55000000);
      final strokeWidth = isSelected ? 2.0 : 1.0;

      for (final rings in m.polygons) {
        final outer = rings.first.map((p) => LatLng(p[1], p[0])).toList(); // [lng,lat]→(lat,lng)
        final holes = <List<LatLng>>[];
        for (int i = 1; i < rings.length; i++) {
          holes.add(rings[i].map((p) => LatLng(p[1], p[0])).toList());
        }
        polygons.add(
          Polygon(
            points: outer,
            holePointsList: holes.isEmpty ? null : holes,
            isFilled: true,
            color: fill,
            borderColor: stroke,
            borderStrokeWidth: strokeWidth,
          ),
        );
      }
    }

    return Scaffold(
      appBar: AppBar(title: const Text('東京都 区市町村ハイライト')),
      body: Column(
        children: [
          // カテゴリ切替ボタン
          Padding(
            padding: const EdgeInsets.fromLTRB(12, 12, 12, 6),
            child: Wrap(
              spacing: 8,
              children: [
                _CatButton(
                  label: '23区',
                  selected: _category == '区',
                  onTap: () => setState(() {
                    _category = '区';
                    _selectedName = null;
                  }),
                ),
                _CatButton(
                  label: '26市',
                  selected: _category == '市',
                  onTap: () => setState(() {
                    _category = '市';
                    _selectedName = null;
                  }),
                ),
                _CatButton(
                  label: '町村',
                  selected: _category == '町村',
                  onTap: () => setState(() {
                    _category = '町村';
                    _selectedName = null;
                  }),
                ),
              ],
            ),
          ),
          // 名前リスト（スクロール可能なチップ群）
          SizedBox(
            height: 56,
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(horizontal: 12),
              scrollDirection: Axis.horizontal,
              itemCount: filtered.length,
              separatorBuilder: (_, __) => const SizedBox(width: 8),
              itemBuilder: (context, i) {
                final name = filtered[i].name;
                final selected = name == _selectedName;
                return ChoiceChip(
                  selected: selected,
                  label: Text(name),
                  onSelected: (_) => setState(() => _selectedName = name),
                );
              },
            ),
          ),
          const SizedBox(height: 8),
          // 地図
          Expanded(
            child: FlutterMap(
              options: MapOptions(
                initialCenter: _center,
                initialZoom: 9.5,
                onTap: (_, __) => setState(() => _selectedName = null), // 地図タップで解除
              ),
              children: [
                TileLayer(
                  urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                  userAgentPackageName: 'com.example.tokyo_select_overlay',
                ),
                PolygonLayer(polygons: polygons),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _CatButton extends StatelessWidget {
  const _CatButton({required this.label, required this.selected, required this.onTap});

  final String label;
  final bool selected;
  final VoidCallback onTap;

  @override
  Widget build(BuildContext context) {
    final color = selected ? Theme.of(context).colorScheme.primary : Colors.black54;
    return OutlinedButton(
      onPressed: onTap,
      style: OutlinedButton.styleFrom(
        side: BorderSide(color: color),
        foregroundColor: color,
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
      ),
      child: Text(label),
    );
  }
}
